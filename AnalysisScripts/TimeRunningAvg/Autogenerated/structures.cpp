// Auto-generated by ImageTank, can overwrite using the C++ template gear menu.

#include "structures.h"

//////////////////////////////////////////////////////////////////////////////
//    Group
//////////////////////////////////////////////////////////////////////////////

void Group::pinfo(void) const
{
    pinfoIndent("");
}

void Group::pinfoIndent(std::string pad) const
{
    std::cerr << pad << "averageRG = " << averageRG << std::endl;
    std::cerr << pad << "numberOfRows = " << numberOfRows << std::endl;
}

void Group::WriteStructure(DTDataStorage &output,std::string name)
{
    // Structure for "averageRG"
    output.Save("averageRG",name+"_1N");
    output.Save("Number",name+"_1T");

    // Structure for "numberOfRows"
    output.Save("numberOfRows",name+"_2N");
    output.Save("Number",name+"_2T");

    output.Save(2,name+"_N");
    output.Save("Group",name+"_Name");
    output.Save("Group",name);
}

void Write(DTDataStorage &output,std::string name,const Group &var)
{
    output.Save(var.averageRG,name+"_averageRG");
    output.Save(var.numberOfRows,name+"_numberOfRows");
    Write(output,name,DTDoubleArray());
}

void WriteOne(DTDataStorage &output,std::string name,const Group &var)
{
    Write(output,name,var);
    output.Save("Group","Seq_"+name);
    Group::WriteStructure(output,"SeqInfo_"+name);
}

void Read(DTDataStorage &input,std::string name,Group &var)
{
    var.averageRG = input.ReadNumber(name+"_averageRG");
    var.numberOfRows = input.ReadNumber(name+"_numberOfRows");
}
